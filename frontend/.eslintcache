[{"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\index.tsx":"1","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\App.tsx":"3","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Styles.ts":"4","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Store.ts":"5","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\SearchPage.tsx":"6","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\HomePage.tsx":"7","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\SignInPage.tsx":"8","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\SignOutPage.tsx":"9","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\QuestionPage.tsx":"10","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Auth.tsx":"11","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Header.tsx":"12","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\AskPage.tsx":"13","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\NotFoundPage.tsx":"14","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\QuestionsData.ts":"15","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\AppSettings.ts":"16","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Page.tsx":"17","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\PageTitle.tsx":"18","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\QuestionList.tsx":"19","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\AnswerList.tsx":"20","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Icons.tsx":"21","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\http.ts":"22","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Question.tsx":"23","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Answer.tsx":"24"},{"size":521,"mtime":1638753409896,"results":"25","hashOfConfig":"26"},{"size":440,"mtime":1638753409900,"results":"27","hashOfConfig":"26"},{"size":2494,"mtime":1640250190959,"results":"28","hashOfConfig":"26"},{"size":2408,"mtime":1638753409891,"results":"29","hashOfConfig":"26"},{"size":3172,"mtime":1638753409890,"results":"30","hashOfConfig":"26"},{"size":1455,"mtime":1638753409888,"results":"31","hashOfConfig":"26"},{"size":2108,"mtime":1638753409881,"results":"32","hashOfConfig":"26"},{"size":484,"mtime":1638753409888,"results":"33","hashOfConfig":"26"},{"size":730,"mtime":1638753409889,"results":"34","hashOfConfig":"26"},{"size":4434,"mtime":1638753409886,"results":"35","hashOfConfig":"26"},{"size":3225,"mtime":1640249883131,"results":"36","hashOfConfig":"26"},{"size":3213,"mtime":1640245745788,"results":"37","hashOfConfig":"26"},{"size":2699,"mtime":1638753409878,"results":"38","hashOfConfig":"26"},{"size":149,"mtime":1638753409882,"results":"39","hashOfConfig":"26"},{"size":4967,"mtime":1638753409887,"results":"40","hashOfConfig":"26"},{"size":354,"mtime":1638753409878,"results":"41","hashOfConfig":"26"},{"size":452,"mtime":1638753409883,"results":"42","hashOfConfig":"26"},{"size":420,"mtime":1638753409884,"results":"43","hashOfConfig":"26"},{"size":1164,"mtime":1638753409885,"results":"44","hashOfConfig":"26"},{"size":744,"mtime":1638753409867,"results":"45","hashOfConfig":"26"},{"size":260,"mtime":1638753409882,"results":"46","hashOfConfig":"26"},{"size":1033,"mtime":1638753409892,"results":"47","hashOfConfig":"26"},{"size":1372,"mtime":1638753409885,"results":"48","hashOfConfig":"26"},{"size":815,"mtime":1638753409866,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"8wdlf5",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":12,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":9,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"109","usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"52"},"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\index.tsx",[],["113","114"],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\App.tsx",["115","116","117","118"],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Styles.ts",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Store.ts",["119"],"import { QuestionData } from './QuestionsData';\r\nimport { Store, createStore, combineReducers } from 'redux';\r\n\r\ninterface QuestionsState {\r\n  readonly loading: boolean;\r\n  readonly unanswered: QuestionData[];\r\n  readonly viewing: QuestionData | null;\r\n  readonly searched: QuestionData[];\r\n}\r\n\r\nexport interface AppState {\r\n  readonly questions: QuestionsState;\r\n}\r\n\r\nconst initialQuestionState: QuestionsState = {\r\n  loading: false,\r\n  unanswered: [],\r\n  viewing: null,\r\n  searched: [],\r\n};\r\n\r\nexport const GETTINGUNANSWEREDQUESTIONS = 'GettingUnansweredQuestions';\r\n\r\nexport const gettingUnansweredQuestionsAction = () =>\r\n  ({\r\n    type: GETTINGUNANSWEREDQUESTIONS,\r\n  } as const);\r\n\r\nexport const GOTUNANSWEREDQUESTIONS = 'GotUnansweredQuestions';\r\n\r\nexport const gotUnansweredQuestionsAction = (questions: QuestionData[]) =>\r\n  ({\r\n    type: GOTUNANSWEREDQUESTIONS,\r\n    questions: questions,\r\n  } as const);\r\n\r\nexport const GETTINGQUESTION = 'GettingQuestion';\r\n\r\nexport const gettingQuestionAction = () =>\r\n  ({\r\n    type: GETTINGQUESTION,\r\n  } as const);\r\n\r\nexport const GOTQUESTION = 'GotQuestion';\r\nexport const gotQuestionAction = (question: QuestionData | null) =>\r\n  ({\r\n    type: GOTQUESTION,\r\n    question: question,\r\n  } as const);\r\n\r\nexport const SEARCHINGQUESTIONS = 'SearchingQuestions';\r\n\r\nexport const searchingQuestionsAction = () =>\r\n  ({\r\n    type: SEARCHINGQUESTIONS,\r\n  } as const);\r\n\r\nexport const SEARCHEDQUESTIONS = 'SearchedQuestions';\r\n\r\nexport const searchedQuestionsAction = (questions: QuestionData[]) =>\r\n  ({\r\n    type: SEARCHEDQUESTIONS,\r\n    questions,\r\n  } as const);\r\n\r\ntype QuestionsActions =\r\n  | ReturnType<typeof gettingUnansweredQuestionsAction>\r\n  | ReturnType<typeof gotUnansweredQuestionsAction>\r\n  | ReturnType<typeof gettingQuestionAction>\r\n  | ReturnType<typeof gotQuestionAction>\r\n  | ReturnType<typeof searchingQuestionsAction>\r\n  | ReturnType<typeof searchedQuestionsAction>;\r\n\r\nconst questionsReducer = (\r\n  state = initialQuestionState,\r\n  action: QuestionsActions,\r\n) => {\r\n  // TODO - Handle the different actions and return new state\r\n  switch (action.type) {\r\n    case GETTINGUNANSWEREDQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    case GOTUNANSWEREDQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        unanswered: action.questions,\r\n        loading: false,\r\n      };\r\n    }\r\n    case GETTINGQUESTION: {\r\n      return {\r\n        ...state,\r\n        viewing: null,\r\n        loading: true,\r\n      };\r\n    }\r\n    case GOTQUESTION: {\r\n      return {\r\n        ...state,\r\n        viewing: action.question,\r\n        loading: false,\r\n      };\r\n    }\r\n    case SEARCHINGQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        searched: [],\r\n        loading: true,\r\n      };\r\n    }\r\n    case SEARCHEDQUESTIONS: {\r\n      return {\r\n        ...state,\r\n        searched: action.questions,\r\n        loading: false,\r\n      };\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport function configureStore(): Store<AppState> {\r\n  const store = createStore(rootReducer, undefined);\r\n  return store;\r\n}","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\SearchPage.tsx",["120","121","122","123"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { searchQuestions/*, QuestionData*/ } from './QuestionsData';\r\nimport React from 'react';\r\nimport { Page } from './Page';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { searchingQuestionsAction, searchedQuestionsAction, AppState } from './Store';\r\n\r\nexport const SearchPage = () => {\r\n  const dispatch = useDispatch();\r\n  const questions = useSelector(\r\n    (state: AppState) => state.questions.searched,\r\n  );  \r\n  const [searchParams] = useSearchParams();\r\n  // const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  const search = searchParams.get('criteria') || '';\r\n  React.useEffect(() => {\r\n    const doSearch = async (criteria: string) => {\r\n      dispatch(searchingQuestionsAction());\r\n      const foundResults = await searchQuestions(criteria);\r\n      dispatch(searchedQuestionsAction(foundResults));\r\n      // setQuestions(foundResults);\r\n    };\r\n    doSearch(search);\r\n  }, [search]);\r\n  return (\r\n    <Page title=\"Search Results\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions} />\r\n    </Page>\r\n  );\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\HomePage.tsx",["124"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { QuestionList } from './QuestionList';\r\nimport { getUnansweredQuestions /*, QuestionData*/ } from './QuestionsData';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { PrimaryButton } from './Styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  gettingUnansweredQuestionsAction,\r\n  gotUnansweredQuestionsAction,\r\n  AppState,\r\n} from './Store';\r\n\r\nexport const HomePage = () => {\r\n  const dispatch = useDispatch();\r\n  const questions = useSelector(\r\n    (state: AppState) => state.questions.unanswered,\r\n  );\r\n  const questionsLoading = useSelector(\r\n    (state: AppState) => state.questions.loading,\r\n  );\r\n  // const [questions, setQuestions] = React.useState<QuestionData[]>([]);\r\n  // const [questionsLoading, setQuestionsLoading] = React.useState(true);\r\n  React.useEffect(() => {\r\n    console.log('first rendered');\r\n    const doGetUnansweredQuestions = async () => {\r\n      dispatch(gettingUnansweredQuestionsAction());\r\n      const unansweredQuestions = await getUnansweredQuestions();\r\n      dispatch(gotUnansweredQuestionsAction(unansweredQuestions));\r\n      // setQuestions(unansweredQuestions);\r\n      // setQuestionsLoading(false);\r\n    };\r\n    doGetUnansweredQuestions();\r\n  }, []);\r\n  console.log('rendered');\r\n\r\n  const navigate = useNavigate();\r\n  const handleAskQuestionClick = () => {\r\n    console.log('TODO - move to the AskPage');\r\n    navigate('ask');\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n        `}\r\n      >\r\n        <PageTitle>Unanswered Questions</PageTitle>\r\n        <PrimaryButton onClick={handleAskQuestionClick}>\r\n          Ask a question\r\n        </PrimaryButton>\r\n      </div>\r\n      {questionsLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <QuestionList data={questions} />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\SignInPage.tsx",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\SignOutPage.tsx",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\QuestionPage.tsx",["125","126","127","128","129","130","131"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { Page } from './Page';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getQuestion, /*QuestionData,*/ postAnswer } from './QuestionsData';\r\nimport { AnswerList } from './AnswerList';\r\nimport { gray3, gray6, Fieldset, FieldContainer, FieldLabel, FieldError,\r\n  FieldTextArea, FormButtonContainer, PrimaryButton, SubmissionSuccess } from './Styles';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { gettingQuestionAction, gotQuestionAction, AppState } from './Store';\r\n\r\ntype FormData = {\r\n  content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n  const dispatch = useDispatch();\r\n  const question = useSelector(\r\n    (state: AppState) => state.questions.viewing,\r\n  );\r\n  const [successfullySubmitted, setSuccessfullySubmitted] = React.useState(false);\r\n  // const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n  const { questionId } = useParams();\r\n  React.useEffect(() => {\r\n    const doGetQuestion = async (questionId: number) => {\r\n      dispatch(gettingQuestionAction());\r\n      const foundQuestion = await getQuestion(questionId);\r\n      dispatch(gotQuestionAction(foundQuestion));\r\n      // setQuestion(foundQuestion);\r\n    };\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n  }, [questionId]);\r\n  const {\r\n    register,\r\n    formState: { errors, isSubmitting },\r\n    handleSubmit,\r\n  } = useForm<FormData>({ mode: 'onBlur' });\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: data.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            font-weight: bold;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by ${question.userName} on \r\n                ${question.created.toLocaleDateString()} ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            <form\r\n              onSubmit={handleSubmit(submitForm)}\r\n              css={css`\r\n                margin-top: 20px;\r\n              `}\r\n            >\r\n              <Fieldset disabled={isSubmitting || successfullySubmitted}>\r\n                <FieldContainer>\r\n                  <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\r\n                  <FieldTextArea\r\n                    {...register('content', { required: true, minLength: 50 })}\r\n                    id=\"content\"\r\n                  />\r\n                  {errors.content && errors.content.type === 'required' && (\r\n                    <FieldError>You must enter the answer</FieldError>\r\n                  )}\r\n                  {errors.content && errors.content.type === 'minLength' && (\r\n                    <FieldError>The answer must be at least 50 characters</FieldError>\r\n                  )}\r\n                </FieldContainer>\r\n                <FormButtonContainer>\r\n                  <PrimaryButton type=\"submit\">Submit Your Answer</PrimaryButton>\r\n                </FormButtonContainer>\r\n                {successfullySubmitted && (\r\n                  <SubmissionSuccess>\r\n                    Your answer was successfully submitted\r\n                  </SubmissionSuccess>\r\n                )}\r\n              </Fieldset>\r\n            </form>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Auth.tsx",["132"],"import React from 'react';\r\nimport createAuth0Client, { User } from '@auth0/auth0-spa-js';\r\nimport Auth0Client from '@auth0/auth0-spa-js/dist/typings/Auth0Client';\r\nimport { authSettings } from './AppSettings';\r\n\r\ninterface Auth0User {\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface IAuth0Context {\r\n  isAuthenticated: boolean;\r\n  //user?: Auth0User;\r\n  user?: User;\r\n  signIn: () => void;\r\n  signOut: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nexport const Auth0Conext = React.createContext<IAuth0Context>({\r\n  isAuthenticated: false,\r\n  signIn: () => {},\r\n  signOut: () => {},\r\n  loading: true,\r\n});\r\n\r\nexport const useAuth = () => React.useContext(Auth0Conext);\r\n\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n  //whether the user is authenticated\r\n  const [isAuthenticated, setIsAuthenticated] = React.useState<boolean>(false);\r\n  //the user's profile info\r\n  //const [user, setUser] = React.useState<Auth0User | undefined>(undefined);\r\n  const [user, setUser] = React.useState<User | undefined>(undefined);\r\n  //a client object from Auth0\r\n  const [auth0Client, setAuth0Client] = React.useState<Auth0Client>();\r\n  //whether the context is loading\r\n  const [loading, setLoading] = React.useState<boolean>(true);\r\n\r\n  const getAuth0ClientFromState = () => {\r\n    if (auth0Client === undefined) {\r\n      throw new Error('Auth0 Client not set');\r\n    }\r\n    return auth0Client;\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      setLoading(true);\r\n      //create the Auth0 client instance\r\n      const auth0FromHook = await createAuth0Client(authSettings);\r\n      setAuth0Client(auth0FromHook);\r\n\r\n      if (\r\n        window.location.pathname === '/signin-callback' &&\r\n        window.location.search.indexOf('code=') > -1\r\n      ) {\r\n        await auth0FromHook.handleRedirectCallback();\r\n        window.location.replace(window.location.origin);\r\n      }\r\n\r\n      //determine whether the user is authenticated\r\n      const isAuthenticatedFromHook = await auth0FromHook.isAuthenticated();\r\n      if (isAuthenticatedFromHook) {\r\n        const user = await auth0FromHook.getUser();\r\n        // const currAuth0User: Auth0User = {\r\n        //   name: user?.name ?? '',\r\n        //   email: user?.email ?? '',\r\n        // };\r\n        console.log('user is authenticated!');\r\n        console.log(user);\r\n        setUser(user);\r\n        //setUser(currAuth0User);\r\n        //console.log(currAuth0User);\r\n      }\r\n      setIsAuthenticated(isAuthenticatedFromHook);\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n  }, []);\r\n\r\n  return (\r\n    <Auth0Conext.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        signIn: () => getAuth0ClientFromState().loginWithRedirect(),\r\n        signOut: () =>\r\n          getAuth0ClientFromState().logout({\r\n            client_id: authSettings.client_id,\r\n            returnTo: window.location.origin + '/signout-callback',\r\n          }),\r\n        loading,\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Conext.Provider>\r\n  );\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const auth0FromHook = await createAuth0Client(authSettings);\r\n  const accessToken = await auth0FromHook.getTokenSilently();\r\n  return accessToken;\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Header.tsx",["133","134"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { fontFamily, fontSize, gray1, gray2, gray5 } from './Styles';\r\nimport { UserIcon } from './Icons';\r\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useAuth } from './Auth';\r\n\r\nconst buttonStyle = css`\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  background-color: transparent;\r\n  color: ${gray2};\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  span {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\ntype FormData = {\r\n  search: string;\r\n};\r\n\r\nexport const Header = () => {\r\n  const navigate = useNavigate();\r\n  const { register, handleSubmit } = useForm<FormData>();\r\n  const [searchParams] = useSearchParams();\r\n  const criteria = searchParams.get('criteria') || '';\r\n  // const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   console.log(e.currentTarget.value);\r\n  // };\r\n  const submitForm = ({ search }: FormData) => {\r\n    navigate(`search?criteria=${search}`);\r\n    // e.preventDefault();\r\n    // console.log(search);\r\n  };\r\n  const { isAuthenticated, user, loading } = useAuth();\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        position: fixed;\r\n        box-sizing: border-box;\r\n        top: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px 20px;\r\n        background-color: #fff;\r\n        border-bottom: 1px solid ${gray5};\r\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n      `}\r\n    >\r\n      <Link\r\n        to=\"/\"\r\n        css={css`\r\n          font-size: 24px;\r\n          font-weight: bold;\r\n          color: ${gray1};\r\n          text-decoration: none;\r\n        `}\r\n      >\r\n        Q & A\r\n      </Link>\r\n      <form onSubmit={handleSubmit(submitForm)}>\r\n        <input\r\n          {...register('search')}\r\n          // ref={register}\r\n          // name=\"search\"\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          // value={search}\r\n          // onChange={handleSearchInputChange}\r\n          css={css`\r\n            box-sizing: border-box;\r\n            font-family: ${fontFamily};\r\n            font-size: ${fontSize};\r\n            padding: 8px 10px;\r\n            border: 1px solid ${gray5};\r\n            border-radius: 3px;\r\n            color: ${gray2};\r\n            background-color: white;\r\n            width: 200px;\r\n            height: 30px;\r\n            :focus {\r\n              outline-color: ${gray5};\r\n            }\r\n          `}\r\n        />\r\n      </form>\r\n      <div>\r\n        {!loading &&\r\n          (isAuthenticated? (\r\n            <div>\r\n              <span>{user!.name}</span>\r\n              <Link to=\"/signout\" css={buttonStyle}>\r\n                <UserIcon />\r\n                <span>Sign Out</span>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Link to=\"/signin\" css={buttonStyle}>\r\n                <UserIcon />\r\n                <span>Sign In</span>\r\n              </Link>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\AskPage.tsx",["135","136","137","138","139"],"import React from 'react';\r\nimport { Page } from './Page';\r\nimport { useForm, useFormState } from 'react-hook-form';\r\nimport { Fieldset, FieldContainer, FieldLabel, FieldError, SubmissionSuccess,\r\n  FieldInput, FieldTextArea, FormButtonContainer, PrimaryButton } from './Styles';\r\nimport { postQuestion } from './QuestionsData';\r\n\r\ntype FormData = {\r\n  title: string;\r\n  content: string;\r\n};\r\n\r\nexport const AskPage = () => {\r\n  const [successfullySubmitted, setSuccessfullySubmitted] = React.useState(false);\r\n  const {\r\n    register,\r\n    formState: { errors, isSubmitting },\r\n    handleSubmit,\r\n  } = useForm<FormData>({ mode: 'onBlur' });\r\n  const submitForm = async (data: FormData) => {\r\n    const result = await postQuestion({\r\n      title: data.title,\r\n      content: data.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitted(result ? true : false);\r\n  };\r\n  return (\r\n    <Page title=\"Ask a question\">\r\n      <form onSubmit={handleSubmit(submitForm)}>\r\n        <Fieldset disabled={isSubmitting || successfullySubmitted}>\r\n          <FieldContainer>\r\n            <FieldLabel htmlFor=\"title\">Title</FieldLabel>\r\n            <FieldInput\r\n              {...register('title', { required: true, minLength: 10 })}\r\n              id=\"title\"\r\n              type=\"text\"\r\n            />\r\n            {errors.title && errors.title.type === 'required' && (\r\n              <FieldError>You must enter the question title</FieldError>\r\n            )}\r\n            {errors.title && errors.title.type === 'minLength' && (\r\n              <FieldError>The title must be at least 10 characters</FieldError>\r\n            )}\r\n          </FieldContainer>\r\n          <FieldContainer>\r\n            <FieldLabel htmlFor=\"content\">Content</FieldLabel>\r\n            <FieldTextArea\r\n              {...register('content', { required: true, minLength: 50 })}\r\n              id=\"content\"\r\n            />\r\n            {errors.content && errors.content.type === 'required' && (\r\n              <FieldError>You must enter the question content</FieldError>\r\n            )}\r\n            {errors.content && errors.content.type === 'minLength' && (\r\n              <FieldError>The content must be at least 50 characters</FieldError>\r\n            )}\r\n          </FieldContainer>\r\n          <FormButtonContainer>\r\n            <PrimaryButton type=\"submit\">Submit Your Question</PrimaryButton>\r\n          </FormButtonContainer>\r\n          {successfullySubmitted && (\r\n            <SubmissionSuccess>\r\n              Your question was successfully submitted\r\n            </SubmissionSuccess>\r\n          )}\r\n        </Fieldset>\r\n      </form>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default AskPage;\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\NotFoundPage.tsx",["140"],"import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const NotFoundPage = () => (\r\n  <Page title=\"Page Not Found\">{null}</Page>\r\n);\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\QuestionsData.ts",["141"],"import { Question } from './Question';\r\nimport { http } from './http';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n  answers: Array<{\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: string;\r\n  }>;\r\n}\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface PosAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created),\r\n  answers: question.answers\r\n    ? question.answers.map((answer) => ({\r\n        ...answer,\r\n        created: new Date(question.created),\r\n      }))\r\n    : [],\r\n});\r\n\r\nexport const postAnswer = async (\r\n  answer: PosAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  await wait(500);\r\n  const answerInQuestion: AnswerData = {\r\n    answerId: 99,\r\n    ...answer,\r\n  };\r\n  const question = questions.filter(\r\n    (q) => q.questionId === answer.questionId,\r\n  )[0];\r\n  question.answers.push(answerInQuestion);\r\n  return answerInQuestion;\r\n};\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  await wait(500);\r\n  const questionId = Math.max(...questions.map((q) => q.questionId)) + 1;\r\n  const newQuestion: QuestionData = {\r\n    ...question,\r\n    questionId,\r\n    answers: [],\r\n  };\r\n  questions.push(newQuestion);\r\n  return newQuestion;\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  // await wait(500);\r\n  // return questions.filter(\r\n  //   (q) =>\r\n  //     q.title.toLowerCase().indexOf(criteria.toLowerCase()) >= 0 ||\r\n  //     q.content.toLowerCase().indexOf(criteria.toLowerCase()) >= 0\r\n  // );\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: `/questions?search=${criteria}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  // await wait(500);\r\n  // const results = questions.filter(q => q.questionId === questionId);\r\n  // return results.length === 0 ? null : results[0];\r\n  const result = await http<QuestionDataFromServer>({\r\n    path: `/questions/${questionId}`,\r\n  });\r\n  if (result.ok && result.body) {\r\n    return mapQuestionFromServer(result.body);\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  // // await wait(500);\r\n  // // return questions.filter(q => q.answers.length === 0);\r\n  // let unansweredQuestions: QuestionData[] = [];\r\n  // // TODO - call api/questions/unanswered\r\n  // const response = await fetch(\r\n  //   'https://localhost:44381/api/questions/unanswered',\r\n  // );\r\n  // // TODO - put response body in unansweredQuestions\r\n  // unansweredQuestions = await response.json();\r\n  // //mapping the created property to a Date object\r\n  // return unansweredQuestions.map((question) => ({\r\n  //   ...question,\r\n  //   created: new Date(question.created),\r\n  // }));\r\n  const result = await http<QuestionDataFromServer[]>({\r\n    path: '/questions/unanswered',\r\n  });\r\n  if (result.ok && result.body) {\r\n    return result.body.map(mapQuestionFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst wait = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\nconst questions: QuestionData[] = [\r\n  {\r\n    questionId: 1,\r\n    title: 'Why should I learn TypeScript?',\r\n    content:\r\n      'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [\r\n      {\r\n        answerId: 1,\r\n        content: 'To catch problems earlier speeding up your developments',\r\n        userName: 'Jane',\r\n        created: new Date(),\r\n      },\r\n      {\r\n        answerId: 2,\r\n        content:\r\n          'So, that you can use the JavaScript features of tomorrow, today',\r\n        userName: 'Fred',\r\n        created: new Date(),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    questionId: 2,\r\n    title: 'Which state management tool should I use?',\r\n    content:\r\n      'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n];\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\AppSettings.ts",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Page.tsx",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\PageTitle.tsx",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\QuestionList.tsx",["142","143","144","145","146","147","148","149","150","151","152","153"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { accent2, gray5 } from './Styles';\r\nimport React from 'react';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Question } from './Question';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList = ({ data, renderItem }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0px 20px;\r\n      background-color: #fff;\r\n      border-bottom-left-radius: 4px;\r\n      border-bottom-right-radius: 4px;\r\n      border-top: 3px solid ${accent2};\r\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n    `}\r\n  >\r\n    {\r\n      data.map(\r\n        (question) => (\r\n          <li key={question.questionId}\r\n            css={css`\r\n              border-top: 1px solid ${gray5};\r\n              :first-of-type {\r\n                border-top: none;\r\n              }              \r\n            `}\r\n          >\r\n              {renderItem ? renderItem(question) : <Question data={question} />}              \r\n          </li>\r\n        )\r\n      )\r\n    }\r\n  </ul>\r\n);\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\AnswerList.tsx",["154","155","156","157","158","159","160","161","162"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionsData';\r\nimport { Answer } from './Answer';\r\nimport { gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData[];\r\n}\r\n\r\nexport const AnswerList = ({ data }: Props) => {\r\n  return (\r\n    <ul\r\n      css={css`\r\n        list-style: none;\r\n        margin: 10px 0 0 0;\r\n        padding: 0;\r\n      `}\r\n    >\r\n      {\r\n        data.map(\r\n          answer => (\r\n            <li\r\n              css={css`\r\n                border-top: 1px solid ${gray5};\r\n              `}\r\n            >\r\n              <Answer data={answer} />\r\n            </li>\r\n          )\r\n        )\r\n      }\r\n    </ul>\r\n  );\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Icons.tsx",[],"C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\http.ts",["163","164","165"],"import { resourceLimits } from 'worker_threads';\r\nimport { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n}\r\n\r\nexport interface HttpResponse<RESB> {\r\n  ok: boolean;\r\n  body?: RESB;\r\n}\r\n\r\nexport const http = async <RESB, REQB = undefined>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  const request = new Request(`${webAPIUrl}${config.path}`);\r\n  const response = await fetch(request);\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n    return { ok: response.ok, body };\r\n  } else {\r\n    logError(request, response);\r\n    return { ok: response.ok };\r\n  }\r\n};\r\n\r\nconst logError = async (request: Request, response: Response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  let body: any;\r\n  if (contentType && contentType.indexOf('application/json') !== -1){\r\n    body = await response.json();\r\n  } else {\r\n    body = await response.text();\r\n  }\r\n  console.error(`Error requesting ${request.method}${request.url}`, body);\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Question.tsx",["166","167"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport { gray2, gray3 } from './Styles';\r\nimport React from 'react';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: QuestionData;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport const Question = ({ data, showContent = true }: Props) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 19px;\r\n      `}\r\n    >\r\n      <Link\r\n        css={css`\r\n          text-decoration: none;\r\n          color: ${gray2};\r\n        `}\r\n        to={`/questions/${data.questionId}`}\r\n      >\r\n        {data.title}\r\n      </Link>\r\n    </div>\r\n    {showContent && (\r\n      <div\r\n        css={css`\r\n          padding-bottom: 10px;\r\n          font-size: 15px;\r\n          color: ${gray2};\r\n        `}\r\n      >\r\n        {data.content.length > 50 ? \r\n          `${data.content.substring(0, 50)}...` : data.content}\r\n      </div>\r\n    )}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Asked by ${data.userName} on \r\n        ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nQuestion.defaultProps = {\r\n  showContent: true,\r\n};\r\n","C:\\Users\\user\\Documents\\GitHub\\ReactAspNetCore\\frontend\\src\\Answer.tsx",["168"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { AnswerData } from './QuestionsData';\r\nimport { gray3 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData;\r\n}\r\n\r\nexport const Answer = ({ data }: Props) => {\r\n  return (\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n      `}\r\n    >\r\n      <div\r\n        css={css`\r\n          padding: 10px 0px;\r\n          font-size: 13px;\r\n        `}\r\n      >\r\n        {data.content}\r\n      </div>\r\n      <div\r\n        css={css`\r\n          font-size: 12px;\r\n          font-style: italic;\r\n          color: ${gray3};\r\n        `}\r\n      >\r\n        {`Asked by ${data.userName} on \r\n          ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n      </div>\r\n    </div>\r\n  );\r\n};",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":3,"column":8,"nodeType":"175","messageId":"176","endLine":3,"endColumn":12},{"ruleId":"177","severity":1,"message":"178","line":57,"column":21,"nodeType":null,"endLine":57,"endColumn":95,"fix":"179"},{"ruleId":"177","severity":1,"message":"180","line":58,"column":21,"nodeType":null,"endLine":58,"endColumn":79,"fix":"181"},{"ruleId":"177","severity":1,"message":"182","line":59,"column":21,"nodeType":null,"endLine":59,"endColumn":98,"fix":"183"},{"ruleId":"177","severity":1,"message":"184","line":132,"column":2,"nodeType":null,"endLine":132,"endColumn":2,"fix":"185"},{"ruleId":"177","severity":1,"message":"186","line":5,"column":25,"nodeType":null,"endLine":5,"endColumn":25,"fix":"187"},{"ruleId":"177","severity":1,"message":"188","line":9,"column":9,"nodeType":null,"endLine":9,"endColumn":70,"fix":"189"},{"ruleId":"177","severity":1,"message":"190","line":13,"column":33,"nodeType":null,"endLine":15,"endColumn":7,"fix":"191"},{"ruleId":"192","severity":1,"message":"193","line":27,"column":6,"nodeType":"194","endLine":27,"endColumn":14,"suggestions":"195"},{"ruleId":"192","severity":1,"message":"193","line":37,"column":6,"nodeType":"194","endLine":37,"endColumn":8,"suggestions":"196"},{"ruleId":"177","severity":1,"message":"197","line":8,"column":9,"nodeType":null,"endLine":8,"endColumn":61,"fix":"198"},{"ruleId":"177","severity":1,"message":"199","line":9,"column":17,"nodeType":null,"endLine":9,"endColumn":72,"fix":"200"},{"ruleId":"177","severity":1,"message":"201","line":20,"column":32,"nodeType":null,"endLine":22,"endColumn":3,"fix":"202"},{"ruleId":"177","severity":1,"message":"203","line":23,"column":76,"nodeType":null,"endLine":23,"endColumn":81,"fix":"204"},{"ruleId":"192","severity":1,"message":"193","line":36,"column":6,"nodeType":"194","endLine":36,"endColumn":18,"suggestions":"205"},{"ruleId":"177","severity":1,"message":"206","line":109,"column":33,"nodeType":null,"endLine":109,"endColumn":74,"fix":"207"},{"ruleId":"177","severity":1,"message":"208","line":113,"column":48,"nodeType":null,"endLine":113,"endColumn":66,"fix":"209"},{"ruleId":"173","severity":1,"message":"210","line":6,"column":11,"nodeType":"175","messageId":"176","endLine":6,"endColumn":20},{"ruleId":"173","severity":1,"message":"211","line":33,"column":9,"nodeType":"175","messageId":"176","endLine":33,"endColumn":17},{"ruleId":"177","severity":1,"message":"186","line":99,"column":27,"nodeType":null,"endLine":99,"endColumn":27,"fix":"212"},{"ruleId":"173","severity":1,"message":"213","line":3,"column":19,"nodeType":"175","messageId":"176","endLine":3,"endColumn":31},{"ruleId":"177","severity":1,"message":"214","line":4,"column":9,"nodeType":null,"endLine":4,"endColumn":59,"fix":"215"},{"ruleId":"177","severity":1,"message":"216","line":5,"column":14,"nodeType":null,"endLine":5,"endColumn":65,"fix":"217"},{"ruleId":"177","severity":1,"message":"203","line":14,"column":76,"nodeType":null,"endLine":14,"endColumn":81,"fix":"218"},{"ruleId":"177","severity":1,"message":"219","line":57,"column":27,"nodeType":null,"endLine":57,"endColumn":69,"fix":"220"},{"ruleId":"177","severity":1,"message":"221","line":4,"column":35,"nodeType":null,"endLine":6,"endColumn":2,"fix":"222"},{"ruleId":"173","severity":1,"message":"223","line":1,"column":10,"nodeType":"175","messageId":"176","endLine":1,"endColumn":18},{"ruleId":"177","severity":1,"message":"224","line":26,"column":6,"nodeType":null,"endLine":28,"endColumn":9,"fix":"225"},{"ruleId":"177","severity":1,"message":"226","line":29,"column":7,"nodeType":null,"endLine":29,"endColumn":14,"fix":"227"},{"ruleId":"177","severity":1,"message":"228","line":30,"column":9,"nodeType":null,"endLine":30,"endColumn":13,"fix":"229"},{"ruleId":"177","severity":1,"message":"228","line":31,"column":1,"nodeType":null,"endLine":31,"endColumn":5,"fix":"230"},{"ruleId":"177","severity":1,"message":"228","line":32,"column":11,"nodeType":null,"endLine":32,"endColumn":15,"fix":"231"},{"ruleId":"177","severity":1,"message":"232","line":33,"column":1,"nodeType":null,"endLine":33,"endColumn":17,"fix":"233"},{"ruleId":"177","severity":1,"message":"234","line":34,"column":11,"nodeType":null,"endLine":34,"endColumn":30,"fix":"235"},{"ruleId":"177","severity":1,"message":"228","line":35,"column":1,"nodeType":null,"endLine":35,"endColumn":5,"fix":"236"},{"ruleId":"177","severity":1,"message":"228","line":36,"column":7,"nodeType":null,"endLine":36,"endColumn":11,"fix":"237"},{"ruleId":"177","severity":1,"message":"238","line":37,"column":1,"nodeType":null,"endLine":37,"endColumn":95,"fix":"239"},{"ruleId":"177","severity":1,"message":"240","line":38,"column":1,"nodeType":null,"endLine":38,"endColumn":11,"fix":"241"},{"ruleId":"177","severity":1,"message":"242","line":39,"column":1,"nodeType":null,"endLine":41,"endColumn":5,"fix":"243"},{"ruleId":"177","severity":1,"message":"244","line":21,"column":8,"nodeType":null,"endLine":23,"endColumn":17,"fix":"245"},{"ruleId":"177","severity":1,"message":"228","line":24,"column":1,"nodeType":null,"endLine":24,"endColumn":5,"fix":"246"},{"ruleId":"177","severity":1,"message":"228","line":25,"column":11,"nodeType":null,"endLine":25,"endColumn":15,"fix":"247"},{"ruleId":"177","severity":1,"message":"228","line":26,"column":1,"nodeType":null,"endLine":26,"endColumn":5,"fix":"248"},{"ruleId":"177","severity":1,"message":"249","line":27,"column":1,"nodeType":null,"endLine":27,"endColumn":15,"fix":"250"},{"ruleId":"177","severity":1,"message":"251","line":28,"column":1,"nodeType":null,"endLine":28,"endColumn":13,"fix":"252"},{"ruleId":"177","severity":1,"message":"228","line":29,"column":1,"nodeType":null,"endLine":29,"endColumn":5,"fix":"253"},{"ruleId":"177","severity":1,"message":"228","line":30,"column":9,"nodeType":null,"endLine":30,"endColumn":13,"fix":"254"},{"ruleId":"177","severity":1,"message":"255","line":31,"column":1,"nodeType":null,"endLine":33,"endColumn":7,"fix":"256"},{"ruleId":"173","severity":1,"message":"257","line":1,"column":10,"nodeType":"175","messageId":"176","endLine":1,"endColumn":24},{"ruleId":"173","severity":1,"message":"258","line":4,"column":30,"nodeType":"175","messageId":"176","endLine":4,"endColumn":34},{"ruleId":"177","severity":1,"message":"186","line":30,"column":69,"nodeType":null,"endLine":30,"endColumn":69,"fix":"259"},{"ruleId":"177","severity":1,"message":"260","line":43,"column":34,"nodeType":null,"endLine":43,"endColumn":37,"fix":"261"},{"ruleId":"177","severity":1,"message":"262","line":44,"column":10,"nodeType":null,"endLine":44,"endColumn":48,"fix":"263"},{"ruleId":"177","severity":1,"message":"184","line":38,"column":3,"nodeType":null,"endLine":38,"endColumn":3,"fix":"264"},"no-native-reassign",["265"],"no-negated-in-lhs",["266"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","prettier/prettier","Replace `·path=\"/signin-callback\"·element={<SignInPage·action=\"signin-callback\"·/>}` with `␍⏎················path=\"/signin-callback\"␍⏎················element={<SignInPage·action=\"signin-callback\"·/>}␍⏎·············`",{"range":"267","text":"268"},"Replace `·path=\"signout\"·element={<SignOutPage·action=\"signout\"·/>}` with `␍⏎················path=\"signout\"␍⏎················element={<SignOutPage·action=\"signout\"·/>}␍⏎·············`",{"range":"269","text":"270"},"Replace `·path=\"/signout-callback\"·element={<SignOutPage·action=\"signout-callback\"·/>}` with `␍⏎················path=\"/signout-callback\"␍⏎················element={<SignOutPage·action=\"signout-callback\"·/>}␍⏎·············`",{"range":"271","text":"272"},"Insert `␍⏎`",{"range":"273","text":"274"},"Insert `·`",{"range":"275","text":"276"},"Replace `·searchingQuestionsAction,·searchedQuestionsAction,·AppState·` with `␍⏎··searchingQuestionsAction,␍⏎··searchedQuestionsAction,␍⏎··AppState,␍⏎`",{"range":"277","text":"278"},"Replace `␍⏎····(state:·AppState)·=>·state.questions.searched,␍⏎··);··` with `(state:·AppState)·=>·state.questions.searched);`",{"range":"279","text":"280"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["281"],["282"],"Replace `·gray3,·gray6,·Fieldset,·FieldContainer,·FieldLabel,` with `␍⏎··gray3,␍⏎··gray6,␍⏎··Fieldset,␍⏎··FieldContainer,␍⏎··FieldLabel,␍⏎·`",{"range":"283","text":"284"},"Replace `·FormButtonContainer,·PrimaryButton,·SubmissionSuccess·` with `␍⏎··FormButtonContainer,␍⏎··PrimaryButton,␍⏎··SubmissionSuccess,␍⏎`",{"range":"285","text":"286"},"Replace `␍⏎····(state:·AppState)·=>·state.questions.viewing,␍⏎··` with `(state:·AppState)·=>·state.questions.viewing`",{"range":"287","text":"288"},"Replace `false` with `␍⏎····false,␍⏎··`",{"range":"289","text":"290"},["291"],"Replace `The·answer·must·be·at·least·50·characters` with `␍⏎······················The·answer·must·be·at·least·50·characters␍⏎····················`",{"range":"292","text":"293"},"Replace `Submit·Your·Answer` with `␍⏎····················Submit·Your·Answer␍⏎··················`",{"range":"294","text":"295"},"'Auth0User' is defined but never used.","'criteria' is assigned a value but never used.",{"range":"296","text":"276"},"'useFormState' is defined but never used.","Replace `·Fieldset,·FieldContainer,·FieldLabel,·FieldError,` with `␍⏎··Fieldset,␍⏎··FieldContainer,␍⏎··FieldLabel,␍⏎··FieldError,␍⏎·`",{"range":"297","text":"298"},"Replace `·FieldTextArea,·FormButtonContainer,·PrimaryButton·` with `␍⏎··FieldTextArea,␍⏎··FormButtonContainer,␍⏎··PrimaryButton,␍⏎`",{"range":"299","text":"300"},{"range":"301","text":"290"},"Replace `The·content·must·be·at·least·50·characters` with `␍⏎················The·content·must·be·at·least·50·characters␍⏎··············`",{"range":"302","text":"303"},"Replace `(␍⏎··<Page·title=\"Page·Not·Found\">{null}</Page>␍⏎)` with `<Page·title=\"Page·Not·Found\">{null}</Page>`",{"range":"304","text":"305"},"'Question' is defined but never used.","Replace `␍⏎······data.map(␍⏎········` with `data.map(`",{"range":"306","text":"307"},"Replace `····<li` with `<li␍⏎·······`",{"range":"308","text":"309"},"Delete `····`",{"range":"310","text":"311"},{"range":"312","text":"311"},{"range":"313","text":"311"},"Replace `················` with `············`",{"range":"314","text":"315"},"Replace `····}··············` with `}`",{"range":"316","text":"317"},{"range":"318","text":"311"},{"range":"319","text":"311"},"Replace `··············{renderItem·?·renderItem(question)·:·<Question·data={question}·/>}··············` with `········{renderItem·?·renderItem(question)·:·<Question·data={question}·/>}`",{"range":"320","text":"321"},"Replace `··········` with `······`",{"range":"322","text":"323"},"Replace `········)␍⏎······)␍⏎····` with `····))`",{"range":"324","text":"325"},"Replace `␍⏎········data.map(␍⏎··········answer` with `data.map((answer)`",{"range":"326","text":"327"},{"range":"328","text":"311"},{"range":"329","text":"311"},{"range":"330","text":"311"},"Replace `··············` with `··········`",{"range":"331","text":"332"},"Replace `············` with `········`",{"range":"333","text":"334"},{"range":"335","text":"311"},{"range":"336","text":"311"},"Replace `··········)␍⏎········)␍⏎······` with `······))`",{"range":"337","text":"338"},"'resourceLimits' is defined but never used.","'REQB' is defined but never used.",{"range":"339","text":"276"},"Delete `·?·`",{"range":"340","text":"311"},"Replace `·`${data.content.substring(0,·50)}...`` with `·?·`${data.content.substring(0,·50)}...`␍⏎·········`",{"range":"341","text":"342"},{"range":"343","text":"274"},"no-global-assign","no-unsafe-negation",[1949,2023],"\r\n                path=\"/signin-callback\"\r\n                element={<SignInPage action=\"signin-callback\" />}\r\n             ",[2048,2106],"\r\n                path=\"signout\"\r\n                element={<SignOutPage action=\"signout\" />}\r\n             ",[2131,2208],"\r\n                path=\"/signout-callback\"\r\n                element={<SignOutPage action=\"signout-callback\" />}\r\n             ",[3172,3172],"\r\n",[204,204]," ",[375,436],"\r\n  searchingQuestionsAction,\r\n  searchedQuestionsAction,\r\n  AppState,\r\n",[559,619],"(state: AppState) => state.questions.searched);",{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},[316,368],"\r\n  gray3,\r\n  gray6,\r\n  Fieldset,\r\n  FieldContainer,\r\n  FieldLabel,\r\n ",[398,453],"\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  SubmissionSuccess,\r\n",[803,858],"(state: AppState) => state.questions.viewing",[937,942],"\r\n    false,\r\n  ",{"desc":"348","fix":"349"},[3829,3870],"\r\n                      The answer must be at least 50 characters\r\n                    ",[4028,4046],"\r\n                    Submit Your Answer\r\n                  ",[2731,2731],[126,176],"\r\n  Fieldset,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldError,\r\n ",[210,261],"\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n",[502,507],[2189,2231],"\r\n                The content must be at least 50 characters\r\n              ",[96,146],"<Page title=\"Page Not Found\">{null}</Page>",[729,756],"data.map(",[779,786],"<li\r\n       ",[822,826],"",[837,841],[894,898],[916,932],"            ",[961,980],"}",[982,986],[1004,1008],[1011,1105],"        {renderItem ? renderItem(question) : <Question data={question} />}",[1107,1117],"      ",[1124,1148],"    ))",[463,500],"data.map((answer)",[507,511],[534,538],[549,553],[598,612],"          ",[616,628],"        ",[631,635],[679,683],[690,720],"      ))",[863,863],[950,953],[964,1002]," ? `${data.content.substring(0, 50)}...`\r\n         ",[815,815],"Update the dependencies array to be: [dispatch, search]",{"range":"350","text":"351"},"Update the dependencies array to be: [dispatch]",{"range":"352","text":"353"},"Update the dependencies array to be: [dispatch, questionId]",{"range":"354","text":"355"},[1111,1119],"[dispatch, search]",[1414,1416],"[dispatch]",[1428,1440],"[dispatch, questionId]"]